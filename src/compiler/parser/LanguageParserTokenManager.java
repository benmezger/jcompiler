/* LanguageParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. LanguageParserTokenManager.java */
package compiler.parser;
import javax.swing.text.html.parser.Parser;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.lang.StringBuilder;

/** Token Manager. */
@SuppressWarnings ("unused")
public class LanguageParserTokenManager implements LanguageParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000ffffff00L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 0;
            return 31;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 42;
         return -1;
      case 1:
         if ((active0 & 0x2000000fff9df00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x62000L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x2000000fdf1df00L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
            return 43;
         }
         if ((active0 & 0x2080000L) != 0L)
            return 43;
         return -1;
      case 3:
         if ((active0 & 0xc0814a00L) != 0L)
            return 43;
         if ((active0 & 0x20000003d709500L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
            return 43;
         }
         return -1;
      case 4:
         if ((active0 & 0x3c709500L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x200000001000000L) != 0L)
            return 43;
         return -1;
      case 5:
         if ((active0 & 0x24708100L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 43;
         }
         if ((active0 & 0x18001400L) != 0L)
            return 43;
         return -1;
      case 6:
         if ((active0 & 0x24708000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 6;
            return 43;
         }
         if ((active0 & 0x100L) != 0L)
            return 43;
         return -1;
      case 7:
         if ((active0 & 0x4300000L) != 0L)
            return 43;
         if ((active0 & 0x20408000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 7;
            return 43;
         }
         return -1;
      case 8:
         if ((active0 & 0x20008000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
            return 43;
         }
         if ((active0 & 0x400000L) != 0L)
            return 43;
         return -1;
      case 9:
         if ((active0 & 0x20008000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 9;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 56;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 37:
         {
         jjmatchedKind = 37;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 38:
         return jjStopAtPos(0, 54);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         {
         jjmatchedKind = 34;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 43:
         return jjStopAtPos(0, 32);
      case 44:
         return jjStopAtPos(0, 53);
      case 45:
         return jjStartNfaWithStates_0(0, 33, 42);
      case 46:
         return jjStopAtPos(0, 52);
      case 47:
         {
         jjmatchedKind = 35;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x140000000000L);
      case 61:
         {
         jjmatchedKind = 40;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x280000000000L);
      case 91:
         return jjStopAtPos(0, 46);
      case 93:
         return jjStopAtPos(0, 47);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60c0000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2040a000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x18800200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40004800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 123:
         return jjStopAtPos(0, 50);
      case 124:
         return jjStopAtPos(0, 55);
      case 125:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 60:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 62:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x38c08200L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80081100L);
      case 79:
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000110000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800L);
      case 83:
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 32);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 32);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 45);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 68:
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 43);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x50000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8408000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 68:
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 43);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 43);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000600400L);
      case 76:
      case 108:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x24000000L);
      case 77:
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 43);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x30200000L);
      case 67:
      case 99:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 43);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 43);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x400100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4100000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 71:
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 43);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 43);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 43);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 43);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0x20408000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 43);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20008000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20008000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 15, 43);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(30); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjstateSet[jjnewStateCnt++] = 23;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(35, 36); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(5, 7); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  else if (curChar == 35)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAdd(1); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjstateSet[jjnewStateCnt++] = 33;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(30); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjstateSet[jjnewStateCnt++] = 23;
                  }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(30); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjstateSet[jjnewStateCnt++] = 23;
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 6:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 18); }
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(20); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(30); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 34:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 46)
                     { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(38); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(41); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(19, 22); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(23, 29); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(19, 22); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(19, 22); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(24); }
                  }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(19, 22); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(19, 22); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(24); }
                  }
                  break;
               case 1:
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 4:
                  if (curChar == 92)
                     { jjAddStates(30, 32); }
                  break;
               case 5:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(33, 35); }
                  break;
               case 14:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(23, 29); }
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(19, 22); }
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(24); }
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(8, 10); }
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(5, 7); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\53", "\55", "\52", "\57", "\52\52", "\45", "\45\45", 
"\75\75", "\75", "\41\75", "\74\74", "\76\76", "\74\74\75", "\76\76\75", "\133", "\135", 
"\50", "\51", "\173", "\175", "\56", "\54", "\46", "\174", "\41", null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   35, 36, 37, 40, 41, 12, 13, 15, 3, 4, 6, 3, 4, 8, 6, 12, 
   13, 17, 15, 22, 24, 23, 23, 22, 25, 26, 29, 30, 31, 23, 5, 7, 
   9, 14, 16, 18, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 66;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 65))
       {
          jjmatchedKind = 65;
          jjmatchedPos = 0;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 7)
       {
          jjmatchedKind = 7;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               TokenHandler.writeInvalidToOutput(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);
         break;
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            TokenHandler.setClosed(true);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public LanguageParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public LanguageParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "BLOCK_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x67ffffffffffff01L, 0x7L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[42];
    private final int[] jjstateSet = new int[2 * 42];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
