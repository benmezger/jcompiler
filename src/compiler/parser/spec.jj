options {
    IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(LanguageParser)
package compiler.parser;

import javax.swing.text.html.parser.Parser;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.lang.StringBuilder;


public class LanguageParser {

    public static List<Token> getTokens(String stream){
        InputStream target =  new ByteArrayInputStream(stream.getBytes());
        LanguageParser parser = new LanguageParser(target);
        return tokenize(parser);
    }

    public static void main(String args[]) throws TokenMgrError, ParseException {
        LanguageParser parser = null;

        if (args.length == 0) {
            parser = new LanguageParser(System.in);
        }
        else if (args.length == 1) {
            try {
                parser = new LanguageParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println("LanguageParser: file " + args[0] + " was not found.");
                return;
            }
        }

        for (Token token: tokenize(parser)){
            String name = LanguageParserConstants.tokenImage[token.kind];
            System.out.println("Line " + token.beginLine + " | Column " + token.beginColumn + " | " + token + "\n");
        }
    }

    public static List<Token> tokenize(LanguageParser parser){
        List<Token> tokens = new ArrayList<>();

        Token token = parser.getNextToken();
        while (token.kind != LanguageParserConstants.EOF){
            tokens.add(token);
            token = parser.getNextToken();
        }

        if (!TokenHandler.isClosed()){
            tokens.add(TokenHandler.createToken());
        }

        return tokens;
    }

}
PARSER_END(LanguageParser)

SKIP: {
    " "
    | "\n"
    | "\t"
    | < "#" (~["\n"])* >
    | < "/*"> {TokenHandler.writeInvalidToOutput(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), jjmatchedKind);}: BLOCK_COMMENT_STATE
}

<BLOCK_COMMENT_STATE> SKIP: {
    <"/*"> {TokenHandler.setClosed(true);}: DEFAULT
    | <~[]>
}


/* Keywords */
TOKEN: {
    <INTEGER: "integer">
    | <REAL: "real">
    | <STRING: "string">
    | <TRUE: "true">
    | <UNTRUE: "untrue">
    | <DO: "do">
    | <THIS: "this">
    | <DESCRIPTION: "description">
    | <BODY: "body">
    | <IS: "is">
    | <AS: "as">
    | <AND: "and">
    | <CONSTANT: "constant">
    | <VARIABLE: "variable">
    | <DESIGNATE: "designate">
    | <READ: "read">
    | <WRITE: "write">
    | <ALL: "all">
    | <AVALIATE: "avaliate">
    | <RESULT: "result">
    | <REPEAT: "repeat">
    | <DECLARATION: "declaration">
    | <TYPE: "type">
}

/* Operators, relations, etc*/
TOKEN: {
    <PLUS : "+">
    | <MINUS : "-">
    | <MULTIPLY : "*">
    | <DIV : "/">
    | <POWER : "**">
    | <WHOLE_DIV : "%">
    | <REST_DIV: "%%">
    | <EQUAL_TO: "==">
    | <ASSIGN: "=">
    | <DIFF_THAN: "!=">
    | <LESS_THAN: "<<">
    | <GREATER_THAN: ">>">
    | <LESS_THAN_OR_EQ_TO: "<<=">
    | <GREATER_THAN_OR_EQ_TO: ">>=">
    | <OPEN_BRACKET: "[">
    | <CLOSE_BRACKET: "]">
    | <OPEN_PARENTHESIS: "(">
    | <CLOSE_PARENTHESIS: ")">
    | <DOT: ".">
    | <COMMA: ",">
}

/* Logical Operators */
TOKEN: {
    <LOGICAL_AND : "&" >
    | <LOGICAL_OR : "|">
    | <LOGICAL_NOT: "!">
    | <LOGIC: "logic">
}

/* Identifiers */
TOKEN: {
    <IDENTIFIER: (<LETTER>(<DIGITS>)?(<LETTER>|("_"))*)+(("_")|<LETTER>)*>
    | <#LETTER: ["a"-"z","A"-"Z"]>
    | <#DIGITS: (["0"-"9"])>
}

/* Numbers  */
TOKEN:  {
    <NUM : (<MINUS>)?(<DIGIT>)+>
    | <NUMBER_REAL : ((<MINUS>)? (<DIGIT>)+ <DOT> (<DIGIT>)+)>
    | <#DIGIT : ["0" - "9"]>
}

TOKEN: {
    <STRING_LITERAL: ("\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"")
    | ("\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\'")>
}

/* Catch all for undefined tokens */
TOKEN : {
    <OTHER: ~[]> |
    <INVALID_IDENTIFIER:
        <LETTER>(<LETTER>|<DIGITS>|("_"))*<DIGITS>(<DIGITS>)+(<LETTER>|("_"))* |
        <LETTER>(<LETTER>|<DIGITS>|("_"))*(<DIGITS>)+ |
        <LETTER>(<LETTER>|<DIGITS>)*(("_"))+<DIGITS>(<LETTER>|<DIGITS>|("_"))* |
        (<DIGITS>)+(<LETTER>|<DIGITS>|("_"))* |
        ("_")(<LETTER>|<DIGITS>|("_"))*>
}


