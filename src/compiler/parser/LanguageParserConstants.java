/* Generated By:JavaCC: Do not edit this line. LanguageParserConstants.java */
package compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LanguageParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 4;
  /** RegularExpression Id. */
  int REAL = 5;
  /** RegularExpression Id. */
  int STRING = 6;
  /** RegularExpression Id. */
  int TRUE = 7;
  /** RegularExpression Id. */
  int UNTRUE = 8;
  /** RegularExpression Id. */
  int DO_THIS = 9;
  /** RegularExpression Id. */
  int DESCRIPTION = 10;
  /** RegularExpression Id. */
  int BODY = 11;
  /** RegularExpression Id. */
  int IS = 12;
  /** RegularExpression Id. */
  int AS = 13;
  /** RegularExpression Id. */
  int AS_CONSTANT = 14;
  /** RegularExpression Id. */
  int AS_VARIABLE = 15;
  /** RegularExpression Id. */
  int DESIGNATE_THIS = 16;
  /** RegularExpression Id. */
  int READ_THIS = 17;
  /** RegularExpression Id. */
  int WRITE_ALL_THIS = 18;
  /** RegularExpression Id. */
  int WRITE_THIS = 19;
  /** RegularExpression Id. */
  int AVALIATE_THIS = 20;
  /** RegularExpression Id. */
  int UNTRUE_RESULT = 21;
  /** RegularExpression Id. */
  int TRUE_RESULT = 22;
  /** RegularExpression Id. */
  int REPEATE_THIS = 23;
  /** RegularExpression Id. */
  int DECLARATION_CONSTANT_AND_VARIABLE = 24;
  /** RegularExpression Id. */
  int DECLARATION_TYPE = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int MINUS = 27;
  /** RegularExpression Id. */
  int MULTIPLY = 28;
  /** RegularExpression Id. */
  int DIV = 29;
  /** RegularExpression Id. */
  int POWER = 30;
  /** RegularExpression Id. */
  int WHOLE_DIV = 31;
  /** RegularExpression Id. */
  int REST_DIV = 32;
  /** RegularExpression Id. */
  int EQUAL_TO = 33;
  /** RegularExpression Id. */
  int DIFF_THAN = 34;
  /** RegularExpression Id. */
  int LESS_THAN = 35;
  /** RegularExpression Id. */
  int GREATER_THAN = 36;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQ_TO = 37;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQ_TO = 38;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 39;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 40;
  /** RegularExpression Id. */
  int DOT = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int OR = 43;
  /** RegularExpression Id. */
  int NOT = 44;
  /** RegularExpression Id. */
  int NUM = 45;
  /** RegularExpression Id. */
  int DOUBLE = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int IDENTIFIER = 48;
  /** RegularExpression Id. */
  int LETTER = 49;
  /** RegularExpression Id. */
  int DIGITS = 50;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"true\"",
    "\"untrue\"",
    "\"do this\"",
    "\"description\"",
    "\"body\"",
    "\"is\"",
    "\"as\"",
    "\"as constant\"",
    "\"as variable\"",
    "\"designate this\"",
    "\"read this\"",
    "\"write all this\"",
    "\"write this\"",
    "\"avaliate this\"",
    "\"untrue result\"",
    "\"true result\"",
    "\"repeat this\"",
    "\"declaration constant and variable\"",
    "\"declaration type\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<NUM>",
    "<DOUBLE>",
    "<DIGIT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGITS>",
  };

}
