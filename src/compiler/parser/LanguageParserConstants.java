/* Generated By:JavaCC: Do not edit this line. LanguageParserConstants.java */
package compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LanguageParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 8;
  /** RegularExpression Id. */
  int REAL = 9;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int UNTRUE = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int THIS = 14;
  /** RegularExpression Id. */
  int DESCRIPTION = 15;
  /** RegularExpression Id. */
  int BODY = 16;
  /** RegularExpression Id. */
  int IS = 17;
  /** RegularExpression Id. */
  int AS = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int CONSTANT = 20;
  /** RegularExpression Id. */
  int VARIABLE = 21;
  /** RegularExpression Id. */
  int DESIGNATE = 22;
  /** RegularExpression Id. */
  int READ = 23;
  /** RegularExpression Id. */
  int WRITE = 24;
  /** RegularExpression Id. */
  int ALL = 25;
  /** RegularExpression Id. */
  int AVALIATE = 26;
  /** RegularExpression Id. */
  int RESULT = 27;
  /** RegularExpression Id. */
  int REPEATE = 28;
  /** RegularExpression Id. */
  int DECLARATION = 29;
  /** RegularExpression Id. */
  int TYPE = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int MULTIPLY = 33;
  /** RegularExpression Id. */
  int DIV = 34;
  /** RegularExpression Id. */
  int POWER = 35;
  /** RegularExpression Id. */
  int WHOLE_DIV = 36;
  /** RegularExpression Id. */
  int REST_DIV = 37;
  /** RegularExpression Id. */
  int EQUAL_TO = 38;
  /** RegularExpression Id. */
  int ASSIGN = 39;
  /** RegularExpression Id. */
  int DIFF_THAN = 40;
  /** RegularExpression Id. */
  int LESS_THAN = 41;
  /** RegularExpression Id. */
  int GREATER_THAN = 42;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQ_TO = 43;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQ_TO = 44;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 45;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 46;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 47;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 48;
  /** RegularExpression Id. */
  int DOT = 49;
  /** RegularExpression Id. */
  int COMMA = 50;
  /** RegularExpression Id. */
  int LOGICAL_AND = 51;
  /** RegularExpression Id. */
  int LOGICAL_OR = 52;
  /** RegularExpression Id. */
  int LOGICAL_NOT = 53;
  /** RegularExpression Id. */
  int NUM = 54;
  /** RegularExpression Id. */
  int DOUBLE = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int DIGITS = 59;
  /** RegularExpression Id. */
  int STRING_CONSTANT = 60;
  /** RegularExpression Id. */
  int OTHER = 61;
  /** RegularExpression Id. */
  int INVALID_ARITHMETIC_OP = 62;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int BLOCK_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "<token of kind 4>",
    "\"/*\"",
    "\"/*\"",
    "<token of kind 7>",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"true\"",
    "\"untrue\"",
    "\"do\"",
    "\"this\"",
    "\"description\"",
    "\"body\"",
    "\"is\"",
    "\"as\"",
    "\"and\"",
    "\"constant\"",
    "\"variable\"",
    "\"designate\"",
    "\"read\"",
    "\"write\"",
    "\"all\"",
    "\"avaliate\"",
    "\"result\"",
    "\"repeat\"",
    "\"declaration\"",
    "\"type\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"=\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<NUM>",
    "<DOUBLE>",
    "<DIGIT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGITS>",
    "<STRING_CONSTANT>",
    "<OTHER>",
    "<INVALID_ARITHMETIC_OP>",
  };

}
